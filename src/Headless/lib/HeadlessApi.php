<?php
/**
 * HeadlessApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TebexHeadless\TebexHeadless;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TebexHeadless\ApiException;
use TebexHeadless\Configuration;
use TebexHeadless\HeaderSelector;
use TebexHeadless\ObjectSerializer;

/**
 * HeadlessApi Class Doc Comment
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeadlessApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addBasketPackage' => [
            'application/json',
        ],
        'applyCoupon' => [
            'application/json',
        ],
        'applyCreatorCode' => [
            'application/json',
        ],
        'applyGiftCard' => [
            'application/json',
        ],
        'createBasket' => [
            'application/json',
        ],
        'getAllCategories' => [
            'application/json',
        ],
        'getAllCategoriesIncludingPackages' => [
            'application/json',
        ],
        'getAllPackages' => [
            'application/json',
        ],
        'getAllPackagesWithAuthedIP' => [
            'application/json',
        ],
        'getAllPackagesWithAuthedIPAndBasket' => [
            'application/json',
        ],
        'getAllPackagesWithBasket' => [
            'application/json',
        ],
        'getBasketAuthUrl' => [
            'application/json',
        ],
        'getBasketById' => [
            'application/json',
        ],
        'getCMSPages' => [
            'application/json',
        ],
        'getCategoryById' => [
            'application/json',
        ],
        'getCategoryIncludingPackages' => [
            'application/json',
        ],
        'getPackageById' => [
            'application/json',
        ],
        'getWebstoreById' => [
            'application/json',
        ],
        'removeBasketPackage' => [
            'application/json',
        ],
        'removeCoupon' => [
            'application/json',
        ],
        'removeCreatorCode' => [
            'application/json',
        ],
        'removeGiftCard' => [
            'application/json',
        ],
        'updatePackageQuantity' => [
            'application/json',
        ],
        'updateTier' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addBasketPackage
     *
     * Add a package to a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\AddBasketPackageRequest $add_basket_package_request add_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBasketPackage'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\Basket
     */
    public function addBasketPackage($basket_ident, $add_basket_package_request = null, string $contentType = self::contentTypes['addBasketPackage'][0])
    {
        list($response) = $this->addBasketPackageWithHttpInfo($basket_ident, $add_basket_package_request, $contentType);
        return $response;
    }

    /**
     * Operation addBasketPackageWithHttpInfo
     *
     * Add a package to a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\AddBasketPackageRequest $add_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBasketPackage'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBasketPackageWithHttpInfo($basket_ident, $add_basket_package_request = null, string $contentType = self::contentTypes['addBasketPackage'][0])
    {
        $request = $this->addBasketPackageRequest($basket_ident, $add_basket_package_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addBasketPackageAsync
     *
     * Add a package to a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\AddBasketPackageRequest $add_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBasketPackageAsync($basket_ident, $add_basket_package_request = null, string $contentType = self::contentTypes['addBasketPackage'][0])
    {
        return $this->addBasketPackageAsyncWithHttpInfo($basket_ident, $add_basket_package_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBasketPackageAsyncWithHttpInfo
     *
     * Add a package to a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\AddBasketPackageRequest $add_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBasketPackageAsyncWithHttpInfo($basket_ident, $add_basket_package_request = null, string $contentType = self::contentTypes['addBasketPackage'][0])
    {
        $returnType = '\TebexHeadless\Model\Basket';
        $request = $this->addBasketPackageRequest($basket_ident, $add_basket_package_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addBasketPackage'
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\AddBasketPackageRequest $add_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBasketPackageRequest($basket_ident, $add_basket_package_request = null, string $contentType = self::contentTypes['addBasketPackage'][0])
    {

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling addBasketPackage'
            );
        }



        $resourcePath = '/baskets/{basketIdent}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_basket_package_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_basket_package_request));
            } else {
                $httpBody = $add_basket_package_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyCoupon
     *
     * Apply a coupon to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\Coupon $coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCoupon'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function applyCoupon($token, $basket_ident, $coupon = null, string $contentType = self::contentTypes['applyCoupon'][0])
    {
        list($response) = $this->applyCouponWithHttpInfo($token, $basket_ident, $coupon, $contentType);
        return $response;
    }

    /**
     * Operation applyCouponWithHttpInfo
     *
     * Apply a coupon to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\Coupon $coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCoupon'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyCouponWithHttpInfo($token, $basket_ident, $coupon = null, string $contentType = self::contentTypes['applyCoupon'][0])
    {
        $request = $this->applyCouponRequest($token, $basket_ident, $coupon, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyCouponAsync
     *
     * Apply a coupon to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\Coupon $coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCouponAsync($token, $basket_ident, $coupon = null, string $contentType = self::contentTypes['applyCoupon'][0])
    {
        return $this->applyCouponAsyncWithHttpInfo($token, $basket_ident, $coupon, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyCouponAsyncWithHttpInfo
     *
     * Apply a coupon to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\Coupon $coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCouponAsyncWithHttpInfo($token, $basket_ident, $coupon = null, string $contentType = self::contentTypes['applyCoupon'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->applyCouponRequest($token, $basket_ident, $coupon, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyCoupon'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\Coupon $coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyCouponRequest($token, $basket_ident, $coupon = null, string $contentType = self::contentTypes['applyCoupon'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling applyCoupon'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling applyCoupon'
            );
        }



        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($coupon)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($coupon));
            } else {
                $httpBody = $coupon;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyCreatorCode
     *
     * Apply a creator code to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\ApplyCreatorCodeRequest $apply_creator_code_request Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreatorCode'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function applyCreatorCode($token, $basket_ident, $apply_creator_code_request = null, string $contentType = self::contentTypes['applyCreatorCode'][0])
    {
        list($response) = $this->applyCreatorCodeWithHttpInfo($token, $basket_ident, $apply_creator_code_request, $contentType);
        return $response;
    }

    /**
     * Operation applyCreatorCodeWithHttpInfo
     *
     * Apply a creator code to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\ApplyCreatorCodeRequest $apply_creator_code_request Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreatorCode'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyCreatorCodeWithHttpInfo($token, $basket_ident, $apply_creator_code_request = null, string $contentType = self::contentTypes['applyCreatorCode'][0])
    {
        $request = $this->applyCreatorCodeRequest($token, $basket_ident, $apply_creator_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyCreatorCodeAsync
     *
     * Apply a creator code to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\ApplyCreatorCodeRequest $apply_creator_code_request Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCreatorCodeAsync($token, $basket_ident, $apply_creator_code_request = null, string $contentType = self::contentTypes['applyCreatorCode'][0])
    {
        return $this->applyCreatorCodeAsyncWithHttpInfo($token, $basket_ident, $apply_creator_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyCreatorCodeAsyncWithHttpInfo
     *
     * Apply a creator code to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\ApplyCreatorCodeRequest $apply_creator_code_request Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCreatorCodeAsyncWithHttpInfo($token, $basket_ident, $apply_creator_code_request = null, string $contentType = self::contentTypes['applyCreatorCode'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->applyCreatorCodeRequest($token, $basket_ident, $apply_creator_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyCreatorCode'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\ApplyCreatorCodeRequest $apply_creator_code_request Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyCreatorCodeRequest($token, $basket_ident, $apply_creator_code_request = null, string $contentType = self::contentTypes['applyCreatorCode'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling applyCreatorCode'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling applyCreatorCode'
            );
        }



        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/creator-codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apply_creator_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apply_creator_code_request));
            } else {
                $httpBody = $apply_creator_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyGiftCard
     *
     * Apply a gift card to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\GiftCard $gift_card Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyGiftCard'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function applyGiftCard($token, $basket_ident, $gift_card = null, string $contentType = self::contentTypes['applyGiftCard'][0])
    {
        list($response) = $this->applyGiftCardWithHttpInfo($token, $basket_ident, $gift_card, $contentType);
        return $response;
    }

    /**
     * Operation applyGiftCardWithHttpInfo
     *
     * Apply a gift card to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\GiftCard $gift_card Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyGiftCard'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyGiftCardWithHttpInfo($token, $basket_ident, $gift_card = null, string $contentType = self::contentTypes['applyGiftCard'][0])
    {
        $request = $this->applyGiftCardRequest($token, $basket_ident, $gift_card, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyGiftCardAsync
     *
     * Apply a gift card to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\GiftCard $gift_card Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyGiftCardAsync($token, $basket_ident, $gift_card = null, string $contentType = self::contentTypes['applyGiftCard'][0])
    {
        return $this->applyGiftCardAsyncWithHttpInfo($token, $basket_ident, $gift_card, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyGiftCardAsyncWithHttpInfo
     *
     * Apply a gift card to a basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\GiftCard $gift_card Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyGiftCardAsyncWithHttpInfo($token, $basket_ident, $gift_card = null, string $contentType = self::contentTypes['applyGiftCard'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->applyGiftCardRequest($token, $basket_ident, $gift_card, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyGiftCard'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\GiftCard $gift_card Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyGiftCardRequest($token, $basket_ident, $gift_card = null, string $contentType = self::contentTypes['applyGiftCard'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling applyGiftCard'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling applyGiftCard'
            );
        }



        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/giftcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($gift_card)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($gift_card));
            } else {
                $httpBody = $gift_card;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBasket
     *
     * Create a new basket
     *
     * @param  string $token The webstore identifier. (required)
     * @param  \TebexHeadless\Model\CreateBasketRequest $create_basket_request create_basket_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function createBasket($token, $create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        list($response) = $this->createBasketWithHttpInfo($token, $create_basket_request, $contentType);
        return $response;
    }

    /**
     * Operation createBasketWithHttpInfo
     *
     * Create a new basket
     *
     * @param  string $token The webstore identifier. (required)
     * @param  \TebexHeadless\Model\CreateBasketRequest $create_basket_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBasketWithHttpInfo($token, $create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        $request = $this->createBasketRequest($token, $create_basket_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBasketAsync
     *
     * Create a new basket
     *
     * @param  string $token The webstore identifier. (required)
     * @param  \TebexHeadless\Model\CreateBasketRequest $create_basket_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasketAsync($token, $create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        return $this->createBasketAsyncWithHttpInfo($token, $create_basket_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBasketAsyncWithHttpInfo
     *
     * Create a new basket
     *
     * @param  string $token The webstore identifier. (required)
     * @param  \TebexHeadless\Model\CreateBasketRequest $create_basket_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasketAsyncWithHttpInfo($token, $create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->createBasketRequest($token, $create_basket_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBasket'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  \TebexHeadless\Model\CreateBasketRequest $create_basket_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBasketRequest($token, $create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling createBasket'
            );
        }



        $resourcePath = '/accounts/{token}/baskets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_basket_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_basket_request));
            } else {
                $httpBody = $create_basket_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCategories
     *
     * Gets all categories available in the webstore.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategories'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CategoryResponse
     */
    public function getAllCategories($token, string $contentType = self::contentTypes['getAllCategories'][0])
    {
        list($response) = $this->getAllCategoriesWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation getAllCategoriesWithHttpInfo
     *
     * Gets all categories available in the webstore.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategories'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCategoriesWithHttpInfo($token, string $contentType = self::contentTypes['getAllCategories'][0])
    {
        $request = $this->getAllCategoriesRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCategoriesAsync
     *
     * Gets all categories available in the webstore.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCategoriesAsync($token, string $contentType = self::contentTypes['getAllCategories'][0])
    {
        return $this->getAllCategoriesAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCategoriesAsyncWithHttpInfo
     *
     * Gets all categories available in the webstore.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCategoriesAsyncWithHttpInfo($token, string $contentType = self::contentTypes['getAllCategories'][0])
    {
        $returnType = '\TebexHeadless\Model\CategoryResponse';
        $request = $this->getAllCategoriesRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCategories'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllCategoriesRequest($token, string $contentType = self::contentTypes['getAllCategories'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllCategories'
            );
        }


        $resourcePath = '/accounts/{token}/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCategoriesIncludingPackages
     *
     * Gets a store&#39;s categories including all package information with them.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategoriesIncludingPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CategoryResponse
     */
    public function getAllCategoriesIncludingPackages($token, string $contentType = self::contentTypes['getAllCategoriesIncludingPackages'][0])
    {
        list($response) = $this->getAllCategoriesIncludingPackagesWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation getAllCategoriesIncludingPackagesWithHttpInfo
     *
     * Gets a store&#39;s categories including all package information with them.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategoriesIncludingPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCategoriesIncludingPackagesWithHttpInfo($token, string $contentType = self::contentTypes['getAllCategoriesIncludingPackages'][0])
    {
        $request = $this->getAllCategoriesIncludingPackagesRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCategoriesIncludingPackagesAsync
     *
     * Gets a store&#39;s categories including all package information with them.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategoriesIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCategoriesIncludingPackagesAsync($token, string $contentType = self::contentTypes['getAllCategoriesIncludingPackages'][0])
    {
        return $this->getAllCategoriesIncludingPackagesAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCategoriesIncludingPackagesAsyncWithHttpInfo
     *
     * Gets a store&#39;s categories including all package information with them.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategoriesIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCategoriesIncludingPackagesAsyncWithHttpInfo($token, string $contentType = self::contentTypes['getAllCategoriesIncludingPackages'][0])
    {
        $returnType = '\TebexHeadless\Model\CategoryResponse';
        $request = $this->getAllCategoriesIncludingPackagesRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCategoriesIncludingPackages'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllCategoriesIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllCategoriesIncludingPackagesRequest($token, string $contentType = self::contentTypes['getAllCategoriesIncludingPackages'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllCategoriesIncludingPackages'
            );
        }


        $resourcePath = '/accounts/{token}/categories?includePackages=1';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllPackages
     *
     * Fetch all packages from a webstore
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\PackageResponse
     */
    public function getAllPackages($token, string $contentType = self::contentTypes['getAllPackages'][0])
    {
        list($response) = $this->getAllPackagesWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation getAllPackagesWithHttpInfo
     *
     * Fetch all packages from a webstore
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\PackageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPackagesWithHttpInfo($token, string $contentType = self::contentTypes['getAllPackages'][0])
    {
        $request = $this->getAllPackagesRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\PackageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\PackageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\PackageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\PackageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\PackageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllPackagesAsync
     *
     * Fetch all packages from a webstore
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesAsync($token, string $contentType = self::contentTypes['getAllPackages'][0])
    {
        return $this->getAllPackagesAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllPackagesAsyncWithHttpInfo
     *
     * Fetch all packages from a webstore
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesAsyncWithHttpInfo($token, string $contentType = self::contentTypes['getAllPackages'][0])
    {
        $returnType = '\TebexHeadless\Model\PackageResponse';
        $request = $this->getAllPackagesRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllPackages'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllPackagesRequest($token, string $contentType = self::contentTypes['getAllPackages'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllPackages'
            );
        }


        $resourcePath = '/accounts/{token}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllPackagesWithAuthedIP
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIP'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\PackageResponse
     */
    public function getAllPackagesWithAuthedIP($token, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIP'][0])
    {
        list($response) = $this->getAllPackagesWithAuthedIPWithHttpInfo($token, $ip_address, $contentType);
        return $response;
    }

    /**
     * Operation getAllPackagesWithAuthedIPWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIP'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\PackageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPackagesWithAuthedIPWithHttpInfo($token, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIP'][0])
    {
        $request = $this->getAllPackagesWithAuthedIPRequest($token, $ip_address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\PackageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\PackageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\PackageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\PackageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\PackageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllPackagesWithAuthedIPAsync
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithAuthedIPAsync($token, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIP'][0])
    {
        return $this->getAllPackagesWithAuthedIPAsyncWithHttpInfo($token, $ip_address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllPackagesWithAuthedIPAsyncWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithAuthedIPAsyncWithHttpInfo($token, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIP'][0])
    {
        $returnType = '\TebexHeadless\Model\PackageResponse';
        $request = $this->getAllPackagesWithAuthedIPRequest($token, $ip_address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllPackagesWithAuthedIP'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllPackagesWithAuthedIPRequest($token, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIP'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllPackagesWithAuthedIP'
            );
        }

        // verify the required parameter 'ip_address' is set
        if ($ip_address === null || (is_array($ip_address) && count($ip_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_address when calling getAllPackagesWithAuthedIP'
            );
        }


        $resourcePath = '/accounts/{token}/packages?ipAddress={ipAddress}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($ip_address !== null) {
            $resourcePath = str_replace(
                '{' . 'ipAddress' . '}',
                ObjectSerializer::toPathValue($ip_address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllPackagesWithAuthedIPAndBasket
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIPAndBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\PackageResponse
     */
    public function getAllPackagesWithAuthedIPAndBasket($token, $basket_ident, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIPAndBasket'][0])
    {
        list($response) = $this->getAllPackagesWithAuthedIPAndBasketWithHttpInfo($token, $basket_ident, $ip_address, $contentType);
        return $response;
    }

    /**
     * Operation getAllPackagesWithAuthedIPAndBasketWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIPAndBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\PackageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPackagesWithAuthedIPAndBasketWithHttpInfo($token, $basket_ident, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIPAndBasket'][0])
    {
        $request = $this->getAllPackagesWithAuthedIPAndBasketRequest($token, $basket_ident, $ip_address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\PackageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\PackageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\PackageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\PackageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\PackageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllPackagesWithAuthedIPAndBasketAsync
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIPAndBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithAuthedIPAndBasketAsync($token, $basket_ident, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIPAndBasket'][0])
    {
        return $this->getAllPackagesWithAuthedIPAndBasketAsyncWithHttpInfo($token, $basket_ident, $ip_address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllPackagesWithAuthedIPAndBasketAsyncWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIPAndBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithAuthedIPAndBasketAsyncWithHttpInfo($token, $basket_ident, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIPAndBasket'][0])
    {
        $returnType = '\TebexHeadless\Model\PackageResponse';
        $request = $this->getAllPackagesWithAuthedIPAndBasketRequest($token, $basket_ident, $ip_address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllPackagesWithAuthedIPAndBasket'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $ip_address An IP address can be provided with authenticated requests. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithAuthedIPAndBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllPackagesWithAuthedIPAndBasketRequest($token, $basket_ident, $ip_address, string $contentType = self::contentTypes['getAllPackagesWithAuthedIPAndBasket'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllPackagesWithAuthedIPAndBasket'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling getAllPackagesWithAuthedIPAndBasket'
            );
        }

        // verify the required parameter 'ip_address' is set
        if ($ip_address === null || (is_array($ip_address) && count($ip_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_address when calling getAllPackagesWithAuthedIPAndBasket'
            );
        }


        $resourcePath = '/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }
        // path params
        if ($ip_address !== null) {
            $resourcePath = str_replace(
                '{' . 'ipAddress' . '}',
                ObjectSerializer::toPathValue($ip_address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllPackagesWithBasket
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\PackageResponse
     */
    public function getAllPackagesWithBasket($token, $basket_ident, string $contentType = self::contentTypes['getAllPackagesWithBasket'][0])
    {
        list($response) = $this->getAllPackagesWithBasketWithHttpInfo($token, $basket_ident, $contentType);
        return $response;
    }

    /**
     * Operation getAllPackagesWithBasketWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithBasket'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\PackageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPackagesWithBasketWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['getAllPackagesWithBasket'][0])
    {
        $request = $this->getAllPackagesWithBasketRequest($token, $basket_ident, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\PackageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\PackageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\PackageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\PackageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\PackageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllPackagesWithBasketAsync
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithBasketAsync($token, $basket_ident, string $contentType = self::contentTypes['getAllPackagesWithBasket'][0])
    {
        return $this->getAllPackagesWithBasketAsyncWithHttpInfo($token, $basket_ident, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllPackagesWithBasketAsyncWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllPackagesWithBasketAsyncWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['getAllPackagesWithBasket'][0])
    {
        $returnType = '\TebexHeadless\Model\PackageResponse';
        $request = $this->getAllPackagesWithBasketRequest($token, $basket_ident, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllPackagesWithBasket'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPackagesWithBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllPackagesWithBasketRequest($token, $basket_ident, string $contentType = self::contentTypes['getAllPackagesWithBasket'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAllPackagesWithBasket'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling getAllPackagesWithBasket'
            );
        }


        $resourcePath = '/accounts/{token}/packages?basketIdent={basketIdent}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBasketAuthUrl
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $return_url The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketAuthUrl'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function getBasketAuthUrl($token, $basket_ident, $return_url, string $contentType = self::contentTypes['getBasketAuthUrl'][0])
    {
        list($response) = $this->getBasketAuthUrlWithHttpInfo($token, $basket_ident, $return_url, $contentType);
        return $response;
    }

    /**
     * Operation getBasketAuthUrlWithHttpInfo
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $return_url The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketAuthUrl'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasketAuthUrlWithHttpInfo($token, $basket_ident, $return_url, string $contentType = self::contentTypes['getBasketAuthUrl'][0])
    {
        $request = $this->getBasketAuthUrlRequest($token, $basket_ident, $return_url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBasketAuthUrlAsync
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $return_url The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketAuthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketAuthUrlAsync($token, $basket_ident, $return_url, string $contentType = self::contentTypes['getBasketAuthUrl'][0])
    {
        return $this->getBasketAuthUrlAsyncWithHttpInfo($token, $basket_ident, $return_url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasketAuthUrlAsyncWithHttpInfo
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $return_url The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketAuthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketAuthUrlAsyncWithHttpInfo($token, $basket_ident, $return_url, string $contentType = self::contentTypes['getBasketAuthUrl'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->getBasketAuthUrlRequest($token, $basket_ident, $return_url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasketAuthUrl'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $return_url The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketAuthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBasketAuthUrlRequest($token, $basket_ident, $return_url, string $contentType = self::contentTypes['getBasketAuthUrl'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getBasketAuthUrl'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling getBasketAuthUrl'
            );
        }

        // verify the required parameter 'return_url' is set
        if ($return_url === null || (is_array($return_url) && count($return_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_url when calling getBasketAuthUrl'
            );
        }


        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }
        // path params
        if ($return_url !== null) {
            $resourcePath = str_replace(
                '{' . 'returnUrl' . '}',
                ObjectSerializer::toPathValue($return_url),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBasketById
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\BasketResponse
     */
    public function getBasketById($token, $basket_ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        list($response) = $this->getBasketByIdWithHttpInfo($token, $basket_ident, $contentType);
        return $response;
    }

    /**
     * Operation getBasketByIdWithHttpInfo
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\BasketResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasketByIdWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        $request = $this->getBasketByIdRequest($token, $basket_ident, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\BasketResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\BasketResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\BasketResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\BasketResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\BasketResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBasketByIdAsync
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketByIdAsync($token, $basket_ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        return $this->getBasketByIdAsyncWithHttpInfo($token, $basket_ident, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasketByIdAsyncWithHttpInfo
     *
     * Fetch a basket from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketByIdAsyncWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        $returnType = '\TebexHeadless\Model\BasketResponse';
        $request = $this->getBasketByIdRequest($token, $basket_ident, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasketById'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBasketByIdRequest($token, $basket_ident, string $contentType = self::contentTypes['getBasketById'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getBasketById'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling getBasketById'
            );
        }


        $resourcePath = '/accounts/{token}/baskets/{basketIdent}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCMSPages
     *
     * Fetch the custom pages associated with the store.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCMSPages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CMSPagesResponse
     */
    public function getCMSPages($token, string $contentType = self::contentTypes['getCMSPages'][0])
    {
        list($response) = $this->getCMSPagesWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation getCMSPagesWithHttpInfo
     *
     * Fetch the custom pages associated with the store.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCMSPages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CMSPagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCMSPagesWithHttpInfo($token, string $contentType = self::contentTypes['getCMSPages'][0])
    {
        $request = $this->getCMSPagesRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CMSPagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CMSPagesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CMSPagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CMSPagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CMSPagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCMSPagesAsync
     *
     * Fetch the custom pages associated with the store.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCMSPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCMSPagesAsync($token, string $contentType = self::contentTypes['getCMSPages'][0])
    {
        return $this->getCMSPagesAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCMSPagesAsyncWithHttpInfo
     *
     * Fetch the custom pages associated with the store.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCMSPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCMSPagesAsyncWithHttpInfo($token, string $contentType = self::contentTypes['getCMSPages'][0])
    {
        $returnType = '\TebexHeadless\Model\CMSPagesResponse';
        $request = $this->getCMSPagesRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCMSPages'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCMSPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCMSPagesRequest($token, string $contentType = self::contentTypes['getCMSPages'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCMSPages'
            );
        }


        $resourcePath = '/accounts/{token}/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoryById
     *
     * Gets information about a specific category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CategoryResponse
     */
    public function getCategoryById($token, $category_id, string $contentType = self::contentTypes['getCategoryById'][0])
    {
        list($response) = $this->getCategoryByIdWithHttpInfo($token, $category_id, $contentType);
        return $response;
    }

    /**
     * Operation getCategoryByIdWithHttpInfo
     *
     * Gets information about a specific category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryByIdWithHttpInfo($token, $category_id, string $contentType = self::contentTypes['getCategoryById'][0])
    {
        $request = $this->getCategoryByIdRequest($token, $category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryByIdAsync
     *
     * Gets information about a specific category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryByIdAsync($token, $category_id, string $contentType = self::contentTypes['getCategoryById'][0])
    {
        return $this->getCategoryByIdAsyncWithHttpInfo($token, $category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryByIdAsyncWithHttpInfo
     *
     * Gets information about a specific category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryByIdAsyncWithHttpInfo($token, $category_id, string $contentType = self::contentTypes['getCategoryById'][0])
    {
        $returnType = '\TebexHeadless\Model\CategoryResponse';
        $request = $this->getCategoryByIdRequest($token, $category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoryById'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoryByIdRequest($token, $category_id, string $contentType = self::contentTypes['getCategoryById'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCategoryById'
            );
        }

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling getCategoryById'
            );
        }


        $resourcePath = '/accounts/{token}/categories/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoryIncludingPackages
     *
     * Gets information about a specific category, including all the packages in the category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryIncludingPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CategoryResponse
     */
    public function getCategoryIncludingPackages($token, $category_id, string $contentType = self::contentTypes['getCategoryIncludingPackages'][0])
    {
        list($response) = $this->getCategoryIncludingPackagesWithHttpInfo($token, $category_id, $contentType);
        return $response;
    }

    /**
     * Operation getCategoryIncludingPackagesWithHttpInfo
     *
     * Gets information about a specific category, including all the packages in the category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryIncludingPackages'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryIncludingPackagesWithHttpInfo($token, $category_id, string $contentType = self::contentTypes['getCategoryIncludingPackages'][0])
    {
        $request = $this->getCategoryIncludingPackagesRequest($token, $category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryIncludingPackagesAsync
     *
     * Gets information about a specific category, including all the packages in the category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryIncludingPackagesAsync($token, $category_id, string $contentType = self::contentTypes['getCategoryIncludingPackages'][0])
    {
        return $this->getCategoryIncludingPackagesAsyncWithHttpInfo($token, $category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryIncludingPackagesAsyncWithHttpInfo
     *
     * Gets information about a specific category, including all the packages in the category
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryIncludingPackagesAsyncWithHttpInfo($token, $category_id, string $contentType = self::contentTypes['getCategoryIncludingPackages'][0])
    {
        $returnType = '\TebexHeadless\Model\CategoryResponse';
        $request = $this->getCategoryIncludingPackagesRequest($token, $category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoryIncludingPackages'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $category_id The ID of the category to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryIncludingPackages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoryIncludingPackagesRequest($token, $category_id, string $contentType = self::contentTypes['getCategoryIncludingPackages'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCategoryIncludingPackages'
            );
        }

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling getCategoryIncludingPackages'
            );
        }


        $resourcePath = '/accounts/{token}/categories/{categoryId}?includePackages=1';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPackageById
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  float $package_id The package&#39;s ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPackageById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\PackageResponse
     */
    public function getPackageById($token, $package_id, string $contentType = self::contentTypes['getPackageById'][0])
    {
        list($response) = $this->getPackageByIdWithHttpInfo($token, $package_id, $contentType);
        return $response;
    }

    /**
     * Operation getPackageByIdWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  float $package_id The package&#39;s ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPackageById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\PackageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageByIdWithHttpInfo($token, $package_id, string $contentType = self::contentTypes['getPackageById'][0])
    {
        $request = $this->getPackageByIdRequest($token, $package_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\PackageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\PackageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\PackageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\PackageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\PackageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPackageByIdAsync
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  float $package_id The package&#39;s ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPackageById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageByIdAsync($token, $package_id, string $contentType = self::contentTypes['getPackageById'][0])
    {
        return $this->getPackageByIdAsyncWithHttpInfo($token, $package_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPackageByIdAsyncWithHttpInfo
     *
     * Fetch a package from a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  float $package_id The package&#39;s ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPackageById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageByIdAsyncWithHttpInfo($token, $package_id, string $contentType = self::contentTypes['getPackageById'][0])
    {
        $returnType = '\TebexHeadless\Model\PackageResponse';
        $request = $this->getPackageByIdRequest($token, $package_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPackageById'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  float $package_id The package&#39;s ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPackageById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPackageByIdRequest($token, $package_id, string $contentType = self::contentTypes['getPackageById'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPackageById'
            );
        }

        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $package_id when calling getPackageById'
            );
        }


        $resourcePath = '/accounts/{token}/packages/{packageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebstoreById
     *
     * Fetch a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebstoreById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\WebstoreResponse
     */
    public function getWebstoreById($token, string $contentType = self::contentTypes['getWebstoreById'][0])
    {
        list($response) = $this->getWebstoreByIdWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation getWebstoreByIdWithHttpInfo
     *
     * Fetch a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebstoreById'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\WebstoreResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebstoreByIdWithHttpInfo($token, string $contentType = self::contentTypes['getWebstoreById'][0])
    {
        $request = $this->getWebstoreByIdRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\WebstoreResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\WebstoreResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\WebstoreResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\WebstoreResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\WebstoreResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebstoreByIdAsync
     *
     * Fetch a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebstoreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebstoreByIdAsync($token, string $contentType = self::contentTypes['getWebstoreById'][0])
    {
        return $this->getWebstoreByIdAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebstoreByIdAsyncWithHttpInfo
     *
     * Fetch a webstore by its identifier
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebstoreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebstoreByIdAsyncWithHttpInfo($token, string $contentType = self::contentTypes['getWebstoreById'][0])
    {
        $returnType = '\TebexHeadless\Model\WebstoreResponse';
        $request = $this->getWebstoreByIdRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebstoreById'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebstoreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebstoreByIdRequest($token, string $contentType = self::contentTypes['getWebstoreById'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getWebstoreById'
            );
        }


        $resourcePath = '/accounts/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeBasketPackage
     *
     * Remove a package from a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveBasketPackageRequest $remove_basket_package_request remove_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeBasketPackage'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\Basket
     */
    public function removeBasketPackage($basket_ident, $remove_basket_package_request = null, string $contentType = self::contentTypes['removeBasketPackage'][0])
    {
        list($response) = $this->removeBasketPackageWithHttpInfo($basket_ident, $remove_basket_package_request, $contentType);
        return $response;
    }

    /**
     * Operation removeBasketPackageWithHttpInfo
     *
     * Remove a package from a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveBasketPackageRequest $remove_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeBasketPackage'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeBasketPackageWithHttpInfo($basket_ident, $remove_basket_package_request = null, string $contentType = self::contentTypes['removeBasketPackage'][0])
    {
        $request = $this->removeBasketPackageRequest($basket_ident, $remove_basket_package_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeBasketPackageAsync
     *
     * Remove a package from a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveBasketPackageRequest $remove_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBasketPackageAsync($basket_ident, $remove_basket_package_request = null, string $contentType = self::contentTypes['removeBasketPackage'][0])
    {
        return $this->removeBasketPackageAsyncWithHttpInfo($basket_ident, $remove_basket_package_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeBasketPackageAsyncWithHttpInfo
     *
     * Remove a package from a basket
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveBasketPackageRequest $remove_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBasketPackageAsyncWithHttpInfo($basket_ident, $remove_basket_package_request = null, string $contentType = self::contentTypes['removeBasketPackage'][0])
    {
        $returnType = '\TebexHeadless\Model\Basket';
        $request = $this->removeBasketPackageRequest($basket_ident, $remove_basket_package_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeBasketPackage'
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveBasketPackageRequest $remove_basket_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeBasketPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeBasketPackageRequest($basket_ident, $remove_basket_package_request = null, string $contentType = self::contentTypes['removeBasketPackage'][0])
    {

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling removeBasketPackage'
            );
        }



        $resourcePath = '/baskets/{basketIdent}/packages/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_basket_package_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_basket_package_request));
            } else {
                $httpBody = $remove_basket_package_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeCoupon
     *
     * Remove a coupon from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCoupon'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeCoupon($token, $basket_ident, string $contentType = self::contentTypes['removeCoupon'][0])
    {
        $this->removeCouponWithHttpInfo($token, $basket_ident, $contentType);
    }

    /**
     * Operation removeCouponWithHttpInfo
     *
     * Remove a coupon from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCoupon'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeCouponWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['removeCoupon'][0])
    {
        $request = $this->removeCouponRequest($token, $basket_ident, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeCouponAsync
     *
     * Remove a coupon from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCouponAsync($token, $basket_ident, string $contentType = self::contentTypes['removeCoupon'][0])
    {
        return $this->removeCouponAsyncWithHttpInfo($token, $basket_ident, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeCouponAsyncWithHttpInfo
     *
     * Remove a coupon from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCouponAsyncWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['removeCoupon'][0])
    {
        $returnType = '';
        $request = $this->removeCouponRequest($token, $basket_ident, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeCoupon'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeCouponRequest($token, $basket_ident, string $contentType = self::contentTypes['removeCoupon'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeCoupon'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling removeCoupon'
            );
        }


        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/coupons/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeCreatorCode
     *
     * Remove a creator code from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCreatorCode'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeCreatorCode($token, $basket_ident, string $contentType = self::contentTypes['removeCreatorCode'][0])
    {
        $this->removeCreatorCodeWithHttpInfo($token, $basket_ident, $contentType);
    }

    /**
     * Operation removeCreatorCodeWithHttpInfo
     *
     * Remove a creator code from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCreatorCode'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeCreatorCodeWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['removeCreatorCode'][0])
    {
        $request = $this->removeCreatorCodeRequest($token, $basket_ident, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeCreatorCodeAsync
     *
     * Remove a creator code from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCreatorCodeAsync($token, $basket_ident, string $contentType = self::contentTypes['removeCreatorCode'][0])
    {
        return $this->removeCreatorCodeAsyncWithHttpInfo($token, $basket_ident, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeCreatorCodeAsyncWithHttpInfo
     *
     * Remove a creator code from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCreatorCodeAsyncWithHttpInfo($token, $basket_ident, string $contentType = self::contentTypes['removeCreatorCode'][0])
    {
        $returnType = '';
        $request = $this->removeCreatorCodeRequest($token, $basket_ident, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeCreatorCode'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCreatorCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeCreatorCodeRequest($token, $basket_ident, string $contentType = self::contentTypes['removeCreatorCode'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeCreatorCode'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling removeCreatorCode'
            );
        }


        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/creator-codes/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeGiftCard
     *
     * Remove a gift card from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveGiftCardRequest $remove_gift_card_request Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGiftCard'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeGiftCard($token, $basket_ident, $remove_gift_card_request = null, string $contentType = self::contentTypes['removeGiftCard'][0])
    {
        $this->removeGiftCardWithHttpInfo($token, $basket_ident, $remove_gift_card_request, $contentType);
    }

    /**
     * Operation removeGiftCardWithHttpInfo
     *
     * Remove a gift card from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveGiftCardRequest $remove_gift_card_request Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGiftCard'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeGiftCardWithHttpInfo($token, $basket_ident, $remove_gift_card_request = null, string $contentType = self::contentTypes['removeGiftCard'][0])
    {
        $request = $this->removeGiftCardRequest($token, $basket_ident, $remove_gift_card_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeGiftCardAsync
     *
     * Remove a gift card from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveGiftCardRequest $remove_gift_card_request Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeGiftCardAsync($token, $basket_ident, $remove_gift_card_request = null, string $contentType = self::contentTypes['removeGiftCard'][0])
    {
        return $this->removeGiftCardAsyncWithHttpInfo($token, $basket_ident, $remove_gift_card_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeGiftCardAsyncWithHttpInfo
     *
     * Remove a gift card from the basket.
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveGiftCardRequest $remove_gift_card_request Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeGiftCardAsyncWithHttpInfo($token, $basket_ident, $remove_gift_card_request = null, string $contentType = self::contentTypes['removeGiftCard'][0])
    {
        $returnType = '';
        $request = $this->removeGiftCardRequest($token, $basket_ident, $remove_gift_card_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeGiftCard'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $basket_ident The basket identifier. (required)
     * @param  \TebexHeadless\Model\RemoveGiftCardRequest $remove_gift_card_request Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGiftCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeGiftCardRequest($token, $basket_ident, $remove_gift_card_request = null, string $contentType = self::contentTypes['removeGiftCard'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeGiftCard'
            );
        }

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling removeGiftCard'
            );
        }



        $resourcePath = '/accounts/{token}/baskets/{basketIdent}/giftcards/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_gift_card_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_gift_card_request));
            } else {
                $httpBody = $remove_gift_card_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePackageQuantity
     *
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  float $package_id The package identifier. (required)
     * @param  \TebexHeadless\Model\UpdatePackageQuantityRequest $update_package_quantity_request update_package_quantity_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePackageQuantity'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePackageQuantity($basket_ident, $package_id, $update_package_quantity_request = null, string $contentType = self::contentTypes['updatePackageQuantity'][0])
    {
        $this->updatePackageQuantityWithHttpInfo($basket_ident, $package_id, $update_package_quantity_request, $contentType);
    }

    /**
     * Operation updatePackageQuantityWithHttpInfo
     *
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  float $package_id The package identifier. (required)
     * @param  \TebexHeadless\Model\UpdatePackageQuantityRequest $update_package_quantity_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePackageQuantity'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePackageQuantityWithHttpInfo($basket_ident, $package_id, $update_package_quantity_request = null, string $contentType = self::contentTypes['updatePackageQuantity'][0])
    {
        $request = $this->updatePackageQuantityRequest($basket_ident, $package_id, $update_package_quantity_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePackageQuantityAsync
     *
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  float $package_id The package identifier. (required)
     * @param  \TebexHeadless\Model\UpdatePackageQuantityRequest $update_package_quantity_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePackageQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePackageQuantityAsync($basket_ident, $package_id, $update_package_quantity_request = null, string $contentType = self::contentTypes['updatePackageQuantity'][0])
    {
        return $this->updatePackageQuantityAsyncWithHttpInfo($basket_ident, $package_id, $update_package_quantity_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePackageQuantityAsyncWithHttpInfo
     *
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  float $package_id The package identifier. (required)
     * @param  \TebexHeadless\Model\UpdatePackageQuantityRequest $update_package_quantity_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePackageQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePackageQuantityAsyncWithHttpInfo($basket_ident, $package_id, $update_package_quantity_request = null, string $contentType = self::contentTypes['updatePackageQuantity'][0])
    {
        $returnType = '';
        $request = $this->updatePackageQuantityRequest($basket_ident, $package_id, $update_package_quantity_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePackageQuantity'
     *
     * @param  string $basket_ident The basket identifier. (required)
     * @param  float $package_id The package identifier. (required)
     * @param  \TebexHeadless\Model\UpdatePackageQuantityRequest $update_package_quantity_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePackageQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePackageQuantityRequest($basket_ident, $package_id, $update_package_quantity_request = null, string $contentType = self::contentTypes['updatePackageQuantity'][0])
    {

        // verify the required parameter 'basket_ident' is set
        if ($basket_ident === null || (is_array($basket_ident) && count($basket_ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $basket_ident when calling updatePackageQuantity'
            );
        }

        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $package_id when calling updatePackageQuantity'
            );
        }



        $resourcePath = '/baskets/{basketIdent}/packages/{packageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($basket_ident !== null) {
            $resourcePath = str_replace(
                '{' . 'basketIdent' . '}',
                ObjectSerializer::toPathValue($basket_ident),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_package_quantity_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_package_quantity_request));
            } else {
                $httpBody = $update_package_quantity_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTier
     *
     * TODO
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $tier_id The tier identifier (required)
     * @param  \TebexHeadless\Model\UpdateTierRequest $update_tier_request update_tier_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTier'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexHeadless\Model\CMSPagesResponse
     */
    public function updateTier($token, $tier_id, $update_tier_request = null, string $contentType = self::contentTypes['updateTier'][0])
    {
        list($response) = $this->updateTierWithHttpInfo($token, $tier_id, $update_tier_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTierWithHttpInfo
     *
     * TODO
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $tier_id The tier identifier (required)
     * @param  \TebexHeadless\Model\UpdateTierRequest $update_tier_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTier'] to see the possible values for this operation
     *
     * @throws \TebexHeadless\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexHeadless\Model\CMSPagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTierWithHttpInfo($token, $tier_id, $update_tier_request = null, string $contentType = self::contentTypes['updateTier'][0])
    {
        $request = $this->updateTierRequest($token, $tier_id, $update_tier_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexHeadless\Model\CMSPagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexHeadless\Model\CMSPagesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexHeadless\Model\CMSPagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexHeadless\Model\CMSPagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexHeadless\Model\CMSPagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTierAsync
     *
     * TODO
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $tier_id The tier identifier (required)
     * @param  \TebexHeadless\Model\UpdateTierRequest $update_tier_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTierAsync($token, $tier_id, $update_tier_request = null, string $contentType = self::contentTypes['updateTier'][0])
    {
        return $this->updateTierAsyncWithHttpInfo($token, $tier_id, $update_tier_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTierAsyncWithHttpInfo
     *
     * TODO
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $tier_id The tier identifier (required)
     * @param  \TebexHeadless\Model\UpdateTierRequest $update_tier_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTierAsyncWithHttpInfo($token, $tier_id, $update_tier_request = null, string $contentType = self::contentTypes['updateTier'][0])
    {
        $returnType = '\TebexHeadless\Model\CMSPagesResponse';
        $request = $this->updateTierRequest($token, $tier_id, $update_tier_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTier'
     *
     * @param  string $token The webstore identifier. (required)
     * @param  string $tier_id The tier identifier (required)
     * @param  \TebexHeadless\Model\UpdateTierRequest $update_tier_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTierRequest($token, $tier_id, $update_tier_request = null, string $contentType = self::contentTypes['updateTier'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateTier'
            );
        }

        // verify the required parameter 'tier_id' is set
        if ($tier_id === null || (is_array($tier_id) && count($tier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tier_id when calling updateTier'
            );
        }



        $resourcePath = '/accounts/{token}/tiers/{tierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($tier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tierId' . '}',
                ObjectSerializer::toPathValue($tier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_tier_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_tier_request));
            } else {
                $httpBody = $update_tier_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
