<?php
/**
 * Tier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TebexHeadless\Model;

use \ArrayAccess;
use \TebexHeadless\ObjectSerializer;

/**
 * Tier Class Doc Comment
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'created_at' => '\DateTime',
        'username_id' => 'string',
        'package' => '\TebexHeadless\Model\Package',
        'active' => 'bool',
        'recurring_payment_reference' => 'string',
        'next_payment_date' => '\DateTime',
        'status' => '\TebexHeadless\Model\TierStatus',
        'pending_downgrade_package' => '\TebexHeadless\Model\TierPendingDowngradePackage'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'username_id' => null,
        'package' => null,
        'active' => null,
        'recurring_payment_reference' => null,
        'next_payment_date' => 'date-time',
        'status' => null,
        'pending_downgrade_package' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_at' => false,
        'username_id' => false,
        'package' => false,
        'active' => false,
        'recurring_payment_reference' => false,
        'next_payment_date' => false,
        'status' => false,
        'pending_downgrade_package' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'username_id' => 'username_id',
        'package' => 'package',
        'active' => 'active',
        'recurring_payment_reference' => 'recurring_payment_reference',
        'next_payment_date' => 'next_payment_date',
        'status' => 'status',
        'pending_downgrade_package' => 'pending_downgrade_package'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'username_id' => 'setUsernameId',
        'package' => 'setPackage',
        'active' => 'setActive',
        'recurring_payment_reference' => 'setRecurringPaymentReference',
        'next_payment_date' => 'setNextPaymentDate',
        'status' => 'setStatus',
        'pending_downgrade_package' => 'setPendingDowngradePackage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'username_id' => 'getUsernameId',
        'package' => 'getPackage',
        'active' => 'getActive',
        'recurring_payment_reference' => 'getRecurringPaymentReference',
        'next_payment_date' => 'getNextPaymentDate',
        'status' => 'getStatus',
        'pending_downgrade_package' => 'getPendingDowngradePackage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('username_id', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('recurring_payment_reference', $data ?? [], null);
        $this->setIfExists('next_payment_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('pending_downgrade_package', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when the tier became active
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets username_id
     *
     * @return string|null
     */
    public function getUsernameId()
    {
        return $this->container['username_id'];
    }

    /**
     * Sets username_id
     *
     * @param string|null $username_id The user's username ID. For Steam, this is a numeric representation of their Steam64ID
     *
     * @return self
     */
    public function setUsernameId($username_id)
    {
        if (is_null($username_id)) {
            throw new \InvalidArgumentException('non-nullable username_id cannot be null');
        }
        $this->container['username_id'] = $username_id;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \TebexHeadless\Model\Package|null
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \TebexHeadless\Model\Package|null $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active True if the tier is currently active.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets recurring_payment_reference
     *
     * @return string|null
     */
    public function getRecurringPaymentReference()
    {
        return $this->container['recurring_payment_reference'];
    }

    /**
     * Sets recurring_payment_reference
     *
     * @param string|null $recurring_payment_reference The ID of the recurring payment this tier is attached to.
     *
     * @return self
     */
    public function setRecurringPaymentReference($recurring_payment_reference)
    {
        if (is_null($recurring_payment_reference)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_reference cannot be null');
        }
        $this->container['recurring_payment_reference'] = $recurring_payment_reference;

        return $this;
    }

    /**
     * Gets next_payment_date
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['next_payment_date'];
    }

    /**
     * Sets next_payment_date
     *
     * @param \DateTime|null $next_payment_date The date and time of the next payment for this tier.
     *
     * @return self
     */
    public function setNextPaymentDate($next_payment_date)
    {
        if (is_null($next_payment_date)) {
            throw new \InvalidArgumentException('non-nullable next_payment_date cannot be null');
        }
        $this->container['next_payment_date'] = $next_payment_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \TebexHeadless\Model\TierStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \TebexHeadless\Model\TierStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pending_downgrade_package
     *
     * @return \TebexHeadless\Model\TierPendingDowngradePackage|null
     */
    public function getPendingDowngradePackage()
    {
        return $this->container['pending_downgrade_package'];
    }

    /**
     * Sets pending_downgrade_package
     *
     * @param \TebexHeadless\Model\TierPendingDowngradePackage|null $pending_downgrade_package pending_downgrade_package
     *
     * @return self
     */
    public function setPendingDowngradePackage($pending_downgrade_package)
    {
        if (is_null($pending_downgrade_package)) {
            array_push($this->openAPINullablesSetToNull, 'pending_downgrade_package');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pending_downgrade_package', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pending_downgrade_package'] = $pending_downgrade_package;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


