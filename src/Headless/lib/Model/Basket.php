<?php
/**
 * Basket
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TebexHeadless\Model;

use \ArrayAccess;
use \TebexHeadless\ObjectSerializer;

/**
 * Basket Class Doc Comment
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Basket implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Basket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ident' => 'string',
        'complete' => 'bool',
        'email' => 'string',
        'username' => 'string',
        'coupons' => '\TebexHeadless\Model\Coupon[]',
        'giftcards' => '\TebexHeadless\Model\GiftCard[]',
        'creator_code' => 'string',
        'cancel_url' => 'string',
        'complete_url' => 'string',
        'complete_auto_redirect' => 'bool',
        'country' => 'string',
        'ip' => 'string',
        'username_id' => 'float',
        'base_price' => 'float',
        'sales_tax' => 'float',
        'total_price' => 'float',
        'currency' => 'string',
        'packages' => '\TebexHeadless\Model\BasketPackage[]',
        'custom' => 'object',
        'links' => '\TebexHeadless\Model\BasketLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ident' => null,
        'complete' => null,
        'email' => null,
        'username' => null,
        'coupons' => null,
        'giftcards' => null,
        'creator_code' => null,
        'cancel_url' => null,
        'complete_url' => null,
        'complete_auto_redirect' => null,
        'country' => null,
        'ip' => null,
        'username_id' => null,
        'base_price' => 'float',
        'sales_tax' => 'float',
        'total_price' => 'float',
        'currency' => null,
        'packages' => null,
        'custom' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'ident' => false,
        'complete' => false,
        'email' => true,
        'username' => true,
        'coupons' => false,
        'giftcards' => false,
        'creator_code' => false,
        'cancel_url' => false,
        'complete_url' => true,
        'complete_auto_redirect' => false,
        'country' => false,
        'ip' => false,
        'username_id' => false,
        'base_price' => false,
        'sales_tax' => false,
        'total_price' => false,
        'currency' => false,
        'packages' => false,
        'custom' => true,
        'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ident' => 'ident',
        'complete' => 'complete',
        'email' => 'email',
        'username' => 'username',
        'coupons' => 'coupons',
        'giftcards' => 'giftcards',
        'creator_code' => 'creator_code',
        'cancel_url' => 'cancel_url',
        'complete_url' => 'complete_url',
        'complete_auto_redirect' => 'complete_auto_redirect',
        'country' => 'country',
        'ip' => 'ip',
        'username_id' => 'username_id',
        'base_price' => 'base_price',
        'sales_tax' => 'sales_tax',
        'total_price' => 'total_price',
        'currency' => 'currency',
        'packages' => 'packages',
        'custom' => 'custom',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ident' => 'setIdent',
        'complete' => 'setComplete',
        'email' => 'setEmail',
        'username' => 'setUsername',
        'coupons' => 'setCoupons',
        'giftcards' => 'setGiftcards',
        'creator_code' => 'setCreatorCode',
        'cancel_url' => 'setCancelUrl',
        'complete_url' => 'setCompleteUrl',
        'complete_auto_redirect' => 'setCompleteAutoRedirect',
        'country' => 'setCountry',
        'ip' => 'setIp',
        'username_id' => 'setUsernameId',
        'base_price' => 'setBasePrice',
        'sales_tax' => 'setSalesTax',
        'total_price' => 'setTotalPrice',
        'currency' => 'setCurrency',
        'packages' => 'setPackages',
        'custom' => 'setCustom',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ident' => 'getIdent',
        'complete' => 'getComplete',
        'email' => 'getEmail',
        'username' => 'getUsername',
        'coupons' => 'getCoupons',
        'giftcards' => 'getGiftcards',
        'creator_code' => 'getCreatorCode',
        'cancel_url' => 'getCancelUrl',
        'complete_url' => 'getCompleteUrl',
        'complete_auto_redirect' => 'getCompleteAutoRedirect',
        'country' => 'getCountry',
        'ip' => 'getIp',
        'username_id' => 'getUsernameId',
        'base_price' => 'getBasePrice',
        'sales_tax' => 'getSalesTax',
        'total_price' => 'getTotalPrice',
        'currency' => 'getCurrency',
        'packages' => 'getPackages',
        'custom' => 'getCustom',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ident', $data ?? [], null);
        $this->setIfExists('complete', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('coupons', $data ?? [], null);
        $this->setIfExists('giftcards', $data ?? [], null);
        $this->setIfExists('creator_code', $data ?? [], null);
        $this->setIfExists('cancel_url', $data ?? [], null);
        $this->setIfExists('complete_url', $data ?? [], null);
        $this->setIfExists('complete_auto_redirect', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('username_id', $data ?? [], null);
        $this->setIfExists('base_price', $data ?? [], null);
        $this->setIfExists('sales_tax', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ident
     *
     * @return string|null
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string|null $ident ident
     *
     * @return self
     */
    public function setIdent($ident)
    {
        if (is_null($ident)) {
            throw new \InvalidArgumentException('non-nullable ident cannot be null');
        }
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool|null
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool|null $complete complete
     *
     * @return self
     */
    public function setComplete($complete)
    {
        if (is_null($complete)) {
            throw new \InvalidArgumentException('non-nullable complete cannot be null');
        }
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return \TebexHeadless\Model\Coupon[]|null
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param \TebexHeadless\Model\Coupon[]|null $coupons coupons
     *
     * @return self
     */
    public function setCoupons($coupons)
    {
        if (is_null($coupons)) {
            throw new \InvalidArgumentException('non-nullable coupons cannot be null');
        }
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets giftcards
     *
     * @return \TebexHeadless\Model\GiftCard[]|null
     */
    public function getGiftcards()
    {
        return $this->container['giftcards'];
    }

    /**
     * Sets giftcards
     *
     * @param \TebexHeadless\Model\GiftCard[]|null $giftcards giftcards
     *
     * @return self
     */
    public function setGiftcards($giftcards)
    {
        if (is_null($giftcards)) {
            throw new \InvalidArgumentException('non-nullable giftcards cannot be null');
        }
        $this->container['giftcards'] = $giftcards;

        return $this;
    }

    /**
     * Gets creator_code
     *
     * @return string|null
     */
    public function getCreatorCode()
    {
        return $this->container['creator_code'];
    }

    /**
     * Sets creator_code
     *
     * @param string|null $creator_code The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
     *
     * @return self
     */
    public function setCreatorCode($creator_code)
    {
        if (is_null($creator_code)) {
            throw new \InvalidArgumentException('non-nullable creator_code cannot be null');
        }
        $this->container['creator_code'] = $creator_code;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string|null
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string|null $cancel_url cancel_url
     *
     * @return self
     */
    public function setCancelUrl($cancel_url)
    {
        if (is_null($cancel_url)) {
            throw new \InvalidArgumentException('non-nullable cancel_url cannot be null');
        }
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets complete_url
     *
     * @return string|null
     */
    public function getCompleteUrl()
    {
        return $this->container['complete_url'];
    }

    /**
     * Sets complete_url
     *
     * @param string|null $complete_url complete_url
     *
     * @return self
     */
    public function setCompleteUrl($complete_url)
    {
        if (is_null($complete_url)) {
            array_push($this->openAPINullablesSetToNull, 'complete_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_url'] = $complete_url;

        return $this;
    }

    /**
     * Gets complete_auto_redirect
     *
     * @return bool|null
     */
    public function getCompleteAutoRedirect()
    {
        return $this->container['complete_auto_redirect'];
    }

    /**
     * Sets complete_auto_redirect
     *
     * @param bool|null $complete_auto_redirect complete_auto_redirect
     *
     * @return self
     */
    public function setCompleteAutoRedirect($complete_auto_redirect)
    {
        if (is_null($complete_auto_redirect)) {
            throw new \InvalidArgumentException('non-nullable complete_auto_redirect cannot be null');
        }
        $this->container['complete_auto_redirect'] = $complete_auto_redirect;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country A two-character country code
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets username_id
     *
     * @return float|null
     */
    public function getUsernameId()
    {
        return $this->container['username_id'];
    }

    /**
     * Sets username_id
     *
     * @param float|null $username_id username_id
     *
     * @return self
     */
    public function setUsernameId($username_id)
    {
        if (is_null($username_id)) {
            throw new \InvalidArgumentException('non-nullable username_id cannot be null');
        }
        $this->container['username_id'] = $username_id;

        return $this;
    }

    /**
     * Gets base_price
     *
     * @return float|null
     */
    public function getBasePrice()
    {
        return $this->container['base_price'];
    }

    /**
     * Sets base_price
     *
     * @param float|null $base_price base_price
     *
     * @return self
     */
    public function setBasePrice($base_price)
    {
        if (is_null($base_price)) {
            throw new \InvalidArgumentException('non-nullable base_price cannot be null');
        }
        $this->container['base_price'] = $base_price;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return float|null
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param float|null $sales_tax sales_tax
     *
     * @return self
     */
    public function setSalesTax($sales_tax)
    {
        if (is_null($sales_tax)) {
            throw new \InvalidArgumentException('non-nullable sales_tax cannot be null');
        }
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price total_price
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency A 3 character currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \TebexHeadless\Model\BasketPackage[]|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \TebexHeadless\Model\BasketPackage[]|null $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return object|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param object|null $custom custom
     *
     * @return self
     */
    public function setCustom($custom)
    {
        if (is_null($custom)) {
            array_push($this->openAPINullablesSetToNull, 'custom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \TebexHeadless\Model\BasketLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \TebexHeadless\Model\BasketLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


