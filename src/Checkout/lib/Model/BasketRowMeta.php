<?php
/**
 * BasketRowMeta
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexCheckout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TebexCheckout\Model;

use \ArrayAccess;
use \TebexCheckout\ObjectSerializer;

/**
 * BasketRowMeta Class Doc Comment
 *
 * @category Class
 * @package  TebexCheckout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BasketRowMeta implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasketRow_meta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'rowprice' => 'float',
        'initialprice' => 'float',
        'is_cumulative' => 'bool',
        'required_packages' => 'int[]',
        'requires_any' => 'bool',
        'category' => 'bool',
        'produces_gift_card' => 'bool',
        'allows_gift_cards' => 'bool',
        'servers' => 'int[]',
        'limits' => '\TebexCheckout\Model\BasketRowMetaLimits',
        'has_deliverables' => 'bool',
        'deliverable_types' => 'string[]',
        'download_link' => 'string',
        'has_seller_protection' => 'bool',
        'item_type' => 'string',
        'revenue_share' => 'float[]',
        'image' => 'string',
        'realprice' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'rowprice' => 'float',
        'initialprice' => 'float',
        'is_cumulative' => null,
        'required_packages' => null,
        'requires_any' => null,
        'category' => null,
        'produces_gift_card' => null,
        'allows_gift_cards' => null,
        'servers' => null,
        'limits' => null,
        'has_deliverables' => null,
        'deliverable_types' => null,
        'download_link' => null,
        'has_seller_protection' => null,
        'item_type' => null,
        'revenue_share' => 'float',
        'image' => null,
        'realprice' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'rowprice' => false,
        'initialprice' => false,
        'is_cumulative' => false,
        'required_packages' => false,
        'requires_any' => false,
        'category' => false,
        'produces_gift_card' => false,
        'allows_gift_cards' => false,
        'servers' => false,
        'limits' => false,
        'has_deliverables' => false,
        'deliverable_types' => false,
        'download_link' => false,
        'has_seller_protection' => false,
        'item_type' => true,
        'revenue_share' => false,
        'image' => true,
        'realprice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'rowprice' => 'rowprice',
        'initialprice' => 'initialprice',
        'is_cumulative' => 'isCumulative',
        'required_packages' => 'requiredPackages',
        'requires_any' => 'requiresAny',
        'category' => 'category',
        'produces_gift_card' => 'producesGiftCard',
        'allows_gift_cards' => 'allowsGiftCards',
        'servers' => 'servers',
        'limits' => 'limits',
        'has_deliverables' => 'hasDeliverables',
        'deliverable_types' => 'deliverableTypes',
        'download_link' => 'downloadLink',
        'has_seller_protection' => 'hasSellerProtection',
        'item_type' => 'itemType',
        'revenue_share' => 'revenue_share',
        'image' => 'image',
        'realprice' => 'realprice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'rowprice' => 'setRowprice',
        'initialprice' => 'setInitialprice',
        'is_cumulative' => 'setIsCumulative',
        'required_packages' => 'setRequiredPackages',
        'requires_any' => 'setRequiresAny',
        'category' => 'setCategory',
        'produces_gift_card' => 'setProducesGiftCard',
        'allows_gift_cards' => 'setAllowsGiftCards',
        'servers' => 'setServers',
        'limits' => 'setLimits',
        'has_deliverables' => 'setHasDeliverables',
        'deliverable_types' => 'setDeliverableTypes',
        'download_link' => 'setDownloadLink',
        'has_seller_protection' => 'setHasSellerProtection',
        'item_type' => 'setItemType',
        'revenue_share' => 'setRevenueShare',
        'image' => 'setImage',
        'realprice' => 'setRealprice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'rowprice' => 'getRowprice',
        'initialprice' => 'getInitialprice',
        'is_cumulative' => 'getIsCumulative',
        'required_packages' => 'getRequiredPackages',
        'requires_any' => 'getRequiresAny',
        'category' => 'getCategory',
        'produces_gift_card' => 'getProducesGiftCard',
        'allows_gift_cards' => 'getAllowsGiftCards',
        'servers' => 'getServers',
        'limits' => 'getLimits',
        'has_deliverables' => 'getHasDeliverables',
        'deliverable_types' => 'getDeliverableTypes',
        'download_link' => 'getDownloadLink',
        'has_seller_protection' => 'getHasSellerProtection',
        'item_type' => 'getItemType',
        'revenue_share' => 'getRevenueShare',
        'image' => 'getImage',
        'realprice' => 'getRealprice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('rowprice', $data ?? [], null);
        $this->setIfExists('initialprice', $data ?? [], null);
        $this->setIfExists('is_cumulative', $data ?? [], null);
        $this->setIfExists('required_packages', $data ?? [], null);
        $this->setIfExists('requires_any', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('produces_gift_card', $data ?? [], null);
        $this->setIfExists('allows_gift_cards', $data ?? [], null);
        $this->setIfExists('servers', $data ?? [], null);
        $this->setIfExists('limits', $data ?? [], null);
        $this->setIfExists('has_deliverables', $data ?? [], null);
        $this->setIfExists('deliverable_types', $data ?? [], null);
        $this->setIfExists('download_link', $data ?? [], null);
        $this->setIfExists('has_seller_protection', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('revenue_share', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('realprice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rowprice
     *
     * @return float|null
     */
    public function getRowprice()
    {
        return $this->container['rowprice'];
    }

    /**
     * Sets rowprice
     *
     * @param float|null $rowprice rowprice
     *
     * @return self
     */
    public function setRowprice($rowprice)
    {
        if (is_null($rowprice)) {
            throw new \InvalidArgumentException('non-nullable rowprice cannot be null');
        }
        $this->container['rowprice'] = $rowprice;

        return $this;
    }

    /**
     * Gets initialprice
     *
     * @return float|null
     */
    public function getInitialprice()
    {
        return $this->container['initialprice'];
    }

    /**
     * Sets initialprice
     *
     * @param float|null $initialprice initialprice
     *
     * @return self
     */
    public function setInitialprice($initialprice)
    {
        if (is_null($initialprice)) {
            throw new \InvalidArgumentException('non-nullable initialprice cannot be null');
        }
        $this->container['initialprice'] = $initialprice;

        return $this;
    }

    /**
     * Gets is_cumulative
     *
     * @return bool|null
     */
    public function getIsCumulative()
    {
        return $this->container['is_cumulative'];
    }

    /**
     * Sets is_cumulative
     *
     * @param bool|null $is_cumulative is_cumulative
     *
     * @return self
     */
    public function setIsCumulative($is_cumulative)
    {
        if (is_null($is_cumulative)) {
            throw new \InvalidArgumentException('non-nullable is_cumulative cannot be null');
        }
        $this->container['is_cumulative'] = $is_cumulative;

        return $this;
    }

    /**
     * Gets required_packages
     *
     * @return int[]|null
     */
    public function getRequiredPackages()
    {
        return $this->container['required_packages'];
    }

    /**
     * Sets required_packages
     *
     * @param int[]|null $required_packages required_packages
     *
     * @return self
     */
    public function setRequiredPackages($required_packages)
    {
        if (is_null($required_packages)) {
            throw new \InvalidArgumentException('non-nullable required_packages cannot be null');
        }
        $this->container['required_packages'] = $required_packages;

        return $this;
    }

    /**
     * Gets requires_any
     *
     * @return bool|null
     */
    public function getRequiresAny()
    {
        return $this->container['requires_any'];
    }

    /**
     * Sets requires_any
     *
     * @param bool|null $requires_any requires_any
     *
     * @return self
     */
    public function setRequiresAny($requires_any)
    {
        if (is_null($requires_any)) {
            throw new \InvalidArgumentException('non-nullable requires_any cannot be null');
        }
        $this->container['requires_any'] = $requires_any;

        return $this;
    }

    /**
     * Gets category
     *
     * @return bool|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param bool|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets produces_gift_card
     *
     * @return bool|null
     */
    public function getProducesGiftCard()
    {
        return $this->container['produces_gift_card'];
    }

    /**
     * Sets produces_gift_card
     *
     * @param bool|null $produces_gift_card produces_gift_card
     *
     * @return self
     */
    public function setProducesGiftCard($produces_gift_card)
    {
        if (is_null($produces_gift_card)) {
            throw new \InvalidArgumentException('non-nullable produces_gift_card cannot be null');
        }
        $this->container['produces_gift_card'] = $produces_gift_card;

        return $this;
    }

    /**
     * Gets allows_gift_cards
     *
     * @return bool|null
     */
    public function getAllowsGiftCards()
    {
        return $this->container['allows_gift_cards'];
    }

    /**
     * Sets allows_gift_cards
     *
     * @param bool|null $allows_gift_cards allows_gift_cards
     *
     * @return self
     */
    public function setAllowsGiftCards($allows_gift_cards)
    {
        if (is_null($allows_gift_cards)) {
            throw new \InvalidArgumentException('non-nullable allows_gift_cards cannot be null');
        }
        $this->container['allows_gift_cards'] = $allows_gift_cards;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return int[]|null
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param int[]|null $servers servers
     *
     * @return self
     */
    public function setServers($servers)
    {
        if (is_null($servers)) {
            throw new \InvalidArgumentException('non-nullable servers cannot be null');
        }
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \TebexCheckout\Model\BasketRowMetaLimits|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \TebexCheckout\Model\BasketRowMetaLimits|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        if (is_null($limits)) {
            throw new \InvalidArgumentException('non-nullable limits cannot be null');
        }
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets has_deliverables
     *
     * @return bool|null
     */
    public function getHasDeliverables()
    {
        return $this->container['has_deliverables'];
    }

    /**
     * Sets has_deliverables
     *
     * @param bool|null $has_deliverables has_deliverables
     *
     * @return self
     */
    public function setHasDeliverables($has_deliverables)
    {
        if (is_null($has_deliverables)) {
            throw new \InvalidArgumentException('non-nullable has_deliverables cannot be null');
        }
        $this->container['has_deliverables'] = $has_deliverables;

        return $this;
    }

    /**
     * Gets deliverable_types
     *
     * @return string[]|null
     */
    public function getDeliverableTypes()
    {
        return $this->container['deliverable_types'];
    }

    /**
     * Sets deliverable_types
     *
     * @param string[]|null $deliverable_types deliverable_types
     *
     * @return self
     */
    public function setDeliverableTypes($deliverable_types)
    {
        if (is_null($deliverable_types)) {
            throw new \InvalidArgumentException('non-nullable deliverable_types cannot be null');
        }
        $this->container['deliverable_types'] = $deliverable_types;

        return $this;
    }

    /**
     * Gets download_link
     *
     * @return string|null
     */
    public function getDownloadLink()
    {
        return $this->container['download_link'];
    }

    /**
     * Sets download_link
     *
     * @param string|null $download_link download_link
     *
     * @return self
     */
    public function setDownloadLink($download_link)
    {
        if (is_null($download_link)) {
            throw new \InvalidArgumentException('non-nullable download_link cannot be null');
        }
        $this->container['download_link'] = $download_link;

        return $this;
    }

    /**
     * Gets has_seller_protection
     *
     * @return bool|null
     */
    public function getHasSellerProtection()
    {
        return $this->container['has_seller_protection'];
    }

    /**
     * Sets has_seller_protection
     *
     * @param bool|null $has_seller_protection has_seller_protection
     *
     * @return self
     */
    public function setHasSellerProtection($has_seller_protection)
    {
        if (is_null($has_seller_protection)) {
            throw new \InvalidArgumentException('non-nullable has_seller_protection cannot be null');
        }
        $this->container['has_seller_protection'] = $has_seller_protection;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            array_push($this->openAPINullablesSetToNull, 'item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets revenue_share
     *
     * @return float[]|null
     */
    public function getRevenueShare()
    {
        return $this->container['revenue_share'];
    }

    /**
     * Sets revenue_share
     *
     * @param float[]|null $revenue_share revenue_share
     *
     * @return self
     */
    public function setRevenueShare($revenue_share)
    {
        if (is_null($revenue_share)) {
            throw new \InvalidArgumentException('non-nullable revenue_share cannot be null');
        }
        $this->container['revenue_share'] = $revenue_share;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            array_push($this->openAPINullablesSetToNull, 'image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets realprice
     *
     * @return float|null
     */
    public function getRealprice()
    {
        return $this->container['realprice'];
    }

    /**
     * Sets realprice
     *
     * @param float|null $realprice realprice
     *
     * @return self
     */
    public function setRealprice($realprice)
    {
        if (is_null($realprice)) {
            throw new \InvalidArgumentException('non-nullable realprice cannot be null');
        }
        $this->container['realprice'] = $realprice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


