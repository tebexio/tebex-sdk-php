<?php
/**
 * BasketsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexCheckout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TebexCheckout\TebexCheckout;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TebexCheckout\ApiException;
use TebexCheckout\Configuration;
use TebexCheckout\HeaderSelector;
use TebexCheckout\ObjectSerializer;

/**
 * BasketsApi Class Doc Comment
 *
 * @category Class
 * @package  TebexCheckout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BasketsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addPackage' => [
            'application/json',
        ],
        'addSaleToBasket' => [
            'application/json',
        ],
        'createBasket' => [
            'application/json',
        ],
        'getBasketById' => [
            'application/json',
        ],
        'removeRowFromBasket' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addPackage
     *
     * Add a package to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\AddPackageRequest $add_package_request add_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPackage'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexCheckout\Model\Basket
     */
    public function addPackage($ident, $add_package_request = null, string $contentType = self::contentTypes['addPackage'][0])
    {
        list($response) = $this->addPackageWithHttpInfo($ident, $add_package_request, $contentType);
        return $response;
    }

    /**
     * Operation addPackageWithHttpInfo
     *
     * Add a package to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\AddPackageRequest $add_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPackage'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexCheckout\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPackageWithHttpInfo($ident, $add_package_request = null, string $contentType = self::contentTypes['addPackage'][0])
    {
        $request = $this->addPackageRequest($ident, $add_package_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexCheckout\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexCheckout\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexCheckout\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexCheckout\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexCheckout\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPackageAsync
     *
     * Add a package to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\AddPackageRequest $add_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageAsync($ident, $add_package_request = null, string $contentType = self::contentTypes['addPackage'][0])
    {
        return $this->addPackageAsyncWithHttpInfo($ident, $add_package_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPackageAsyncWithHttpInfo
     *
     * Add a package to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\AddPackageRequest $add_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageAsyncWithHttpInfo($ident, $add_package_request = null, string $contentType = self::contentTypes['addPackage'][0])
    {
        $returnType = '\TebexCheckout\Model\Basket';
        $request = $this->addPackageRequest($ident, $add_package_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPackage'
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\AddPackageRequest $add_package_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPackageRequest($ident, $add_package_request = null, string $contentType = self::contentTypes['addPackage'][0])
    {

        // verify the required parameter 'ident' is set
        if ($ident === null || (is_array($ident) && count($ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ident when calling addPackage'
            );
        }



        $resourcePath = '/baskets/{ident}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ident !== null) {
            $resourcePath = str_replace(
                '{' . 'ident' . '}',
                ObjectSerializer::toPathValue($ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_package_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_package_request));
            } else {
                $httpBody = $add_package_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addSaleToBasket
     *
     * Add a sale to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\Sale $sale Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSaleToBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexCheckout\Model\Basket
     */
    public function addSaleToBasket($ident, $sale = null, string $contentType = self::contentTypes['addSaleToBasket'][0])
    {
        list($response) = $this->addSaleToBasketWithHttpInfo($ident, $sale, $contentType);
        return $response;
    }

    /**
     * Operation addSaleToBasketWithHttpInfo
     *
     * Add a sale to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\Sale $sale Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSaleToBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexCheckout\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSaleToBasketWithHttpInfo($ident, $sale = null, string $contentType = self::contentTypes['addSaleToBasket'][0])
    {
        $request = $this->addSaleToBasketRequest($ident, $sale, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexCheckout\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexCheckout\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexCheckout\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexCheckout\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexCheckout\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSaleToBasketAsync
     *
     * Add a sale to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\Sale $sale Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSaleToBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSaleToBasketAsync($ident, $sale = null, string $contentType = self::contentTypes['addSaleToBasket'][0])
    {
        return $this->addSaleToBasketAsyncWithHttpInfo($ident, $sale, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSaleToBasketAsyncWithHttpInfo
     *
     * Add a sale to the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\Sale $sale Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSaleToBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSaleToBasketAsyncWithHttpInfo($ident, $sale = null, string $contentType = self::contentTypes['addSaleToBasket'][0])
    {
        $returnType = '\TebexCheckout\Model\Basket';
        $request = $this->addSaleToBasketRequest($ident, $sale, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSaleToBasket'
     *
     * @param  string $ident The basket identifier. (required)
     * @param  \TebexCheckout\Model\Sale $sale Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSaleToBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addSaleToBasketRequest($ident, $sale = null, string $contentType = self::contentTypes['addSaleToBasket'][0])
    {

        // verify the required parameter 'ident' is set
        if ($ident === null || (is_array($ident) && count($ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ident when calling addSaleToBasket'
            );
        }



        $resourcePath = '/baskets/{ident}/sales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ident !== null) {
            $resourcePath = str_replace(
                '{' . 'ident' . '}',
                ObjectSerializer::toPathValue($ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sale)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sale));
            } else {
                $httpBody = $sale;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBasket
     *
     * Create a basket that can be used to pay for items
     *
     * @param  \TebexCheckout\Model\CreateBasketRequest $create_basket_request Create a basket, returning the full basket object and payment link. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexCheckout\Model\Basket
     */
    public function createBasket($create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        list($response) = $this->createBasketWithHttpInfo($create_basket_request, $contentType);
        return $response;
    }

    /**
     * Operation createBasketWithHttpInfo
     *
     * Create a basket that can be used to pay for items
     *
     * @param  \TebexCheckout\Model\CreateBasketRequest $create_basket_request Create a basket, returning the full basket object and payment link. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexCheckout\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBasketWithHttpInfo($create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        $request = $this->createBasketRequest($create_basket_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexCheckout\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexCheckout\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexCheckout\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexCheckout\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexCheckout\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBasketAsync
     *
     * Create a basket that can be used to pay for items
     *
     * @param  \TebexCheckout\Model\CreateBasketRequest $create_basket_request Create a basket, returning the full basket object and payment link. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasketAsync($create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        return $this->createBasketAsyncWithHttpInfo($create_basket_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBasketAsyncWithHttpInfo
     *
     * Create a basket that can be used to pay for items
     *
     * @param  \TebexCheckout\Model\CreateBasketRequest $create_basket_request Create a basket, returning the full basket object and payment link. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasketAsyncWithHttpInfo($create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {
        $returnType = '\TebexCheckout\Model\Basket';
        $request = $this->createBasketRequest($create_basket_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBasket'
     *
     * @param  \TebexCheckout\Model\CreateBasketRequest $create_basket_request Create a basket, returning the full basket object and payment link. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBasketRequest($create_basket_request = null, string $contentType = self::contentTypes['createBasket'][0])
    {



        $resourcePath = '/baskets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_basket_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_basket_request));
            } else {
                $httpBody = $create_basket_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBasketById
     *
     * Fetch a basket by its identifier
     *
     * @param  string $ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TebexCheckout\Model\Basket
     */
    public function getBasketById($ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        list($response) = $this->getBasketByIdWithHttpInfo($ident, $contentType);
        return $response;
    }

    /**
     * Operation getBasketByIdWithHttpInfo
     *
     * Fetch a basket by its identifier
     *
     * @param  string $ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TebexCheckout\Model\Basket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasketByIdWithHttpInfo($ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        $request = $this->getBasketByIdRequest($ident, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TebexCheckout\Model\Basket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TebexCheckout\Model\Basket' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TebexCheckout\Model\Basket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TebexCheckout\Model\Basket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TebexCheckout\Model\Basket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBasketByIdAsync
     *
     * Fetch a basket by its identifier
     *
     * @param  string $ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketByIdAsync($ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        return $this->getBasketByIdAsyncWithHttpInfo($ident, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasketByIdAsyncWithHttpInfo
     *
     * Fetch a basket by its identifier
     *
     * @param  string $ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketByIdAsyncWithHttpInfo($ident, string $contentType = self::contentTypes['getBasketById'][0])
    {
        $returnType = '\TebexCheckout\Model\Basket';
        $request = $this->getBasketByIdRequest($ident, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasketById'
     *
     * @param  string $ident The basket identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBasketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBasketByIdRequest($ident, string $contentType = self::contentTypes['getBasketById'][0])
    {

        // verify the required parameter 'ident' is set
        if ($ident === null || (is_array($ident) && count($ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ident when calling getBasketById'
            );
        }


        $resourcePath = '/baskets/{ident}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ident !== null) {
            $resourcePath = str_replace(
                '{' . 'ident' . '}',
                ObjectSerializer::toPathValue($ident),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRowFromBasket
     *
     * Remove a row from the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  int $rows_id The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRowFromBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeRowFromBasket($ident, $rows_id, string $contentType = self::contentTypes['removeRowFromBasket'][0])
    {
        $this->removeRowFromBasketWithHttpInfo($ident, $rows_id, $contentType);
    }

    /**
     * Operation removeRowFromBasketWithHttpInfo
     *
     * Remove a row from the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  int $rows_id The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRowFromBasket'] to see the possible values for this operation
     *
     * @throws \TebexCheckout\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRowFromBasketWithHttpInfo($ident, $rows_id, string $contentType = self::contentTypes['removeRowFromBasket'][0])
    {
        $request = $this->removeRowFromBasketRequest($ident, $rows_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeRowFromBasketAsync
     *
     * Remove a row from the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  int $rows_id The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRowFromBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRowFromBasketAsync($ident, $rows_id, string $contentType = self::contentTypes['removeRowFromBasket'][0])
    {
        return $this->removeRowFromBasketAsyncWithHttpInfo($ident, $rows_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRowFromBasketAsyncWithHttpInfo
     *
     * Remove a row from the basket
     *
     * @param  string $ident The basket identifier. (required)
     * @param  int $rows_id The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRowFromBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRowFromBasketAsyncWithHttpInfo($ident, $rows_id, string $contentType = self::contentTypes['removeRowFromBasket'][0])
    {
        $returnType = '';
        $request = $this->removeRowFromBasketRequest($ident, $rows_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRowFromBasket'
     *
     * @param  string $ident The basket identifier. (required)
     * @param  int $rows_id The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRowFromBasket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRowFromBasketRequest($ident, $rows_id, string $contentType = self::contentTypes['removeRowFromBasket'][0])
    {

        // verify the required parameter 'ident' is set
        if ($ident === null || (is_array($ident) && count($ident) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ident when calling removeRowFromBasket'
            );
        }

        // verify the required parameter 'rows_id' is set
        if ($rows_id === null || (is_array($rows_id) && count($rows_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows_id when calling removeRowFromBasket'
            );
        }


        $resourcePath = '/baskets/{ident}/packages/{rows.id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ident !== null) {
            $resourcePath = str_replace(
                '{' . 'ident' . '}',
                ObjectSerializer::toPathValue($ident),
                $resourcePath
            );
        }
        // path params
        if ($rows_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rows.id' . '}',
                ObjectSerializer::toPathValue($rows_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
